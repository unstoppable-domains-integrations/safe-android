apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.appdistribution'
apply from: '../buildsystem/coverage_report.gradle'
apply from: '../buildsystem/test_dependencies.gradle'
apply from: '../buildsystem/test_android_dependencies.gradle'

android {
    defaultConfig {
        applicationId "io.gnosis.safe"
        versionCode getInt("APP_VERSION_CODE", 703)
        versionName getKey("APP_VERSION_NAME", "2.1.0")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Debug Settings
        buildConfigField javaTypes.BOOLEAN, "VERBOSE_EXCEPTIONS", getKey("VERBOSE_EXCEPTIONS", "false")
        buildConfigField javaTypes.BOOLEAN, "ALLOW_RESTRICTED_TX", getKey("ALLOW_RESTRICTED_TX", "false")

        // Safe creation params
        buildConfigField javaTypes.INT, "PROXY_INIT_DATA_LENGTH", getKey("PROXY_INIT_DATA_LENGTH", "3006")
        buildConfigField javaTypes.STRING, "PROXY_INIT_DATA_HASH", asString(getKey("PROXY_INIT_DATA_HASH", "edf1810f1a9b5415ef81722254f125afaa5165f526077a7d7da91687cdfbc98b"))
        buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xd9e09beaEb338d81a7c5688358df0071d4988115"))
        // API keys
        buildConfigField javaTypes.STRING, "INFURA_API_KEY", asString(getKey("INFURA_API_KEY", ""))
        // Services
        buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://rinkeby.infura.io/v3/"))
        buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.gnosis.io/api/"))
        // Blockchain settings
        buildConfigField javaTypes.STRING, "BLOCKCHAIN_NAME", asString(getKey("BLOCKCHAIN_NAME", "Rinkeby"))
        buildConfigField javaTypes.LONG, "BLOCKCHAIN_CHAIN_ID", getKey("BLOCKCHAIN_CHAIN_ID", "4")
        // Certificates
        buildConfigField javaTypes.STRING, "PINNED_URLS", asString(getKey("PINNED_URLS", "*.staging.gnosisdev.com,*.dev.gnosisdev.com,*.gnosisdev.pm,*.gnosis.pm,*.gnosis.io"))
        buildConfigField javaTypes.STRING, "PINNED_ROOT_CERTIFICATE_HASHES", asString(getKey("ROOT_CERTIFICATE_HASH",
                "sha256/++MBgDH5WGvL9Bcn5Be30cRcL0f5O+NyoXuWtQdX1aI=," +
                        "sha256/f0KW/FtqTjs108NpYj42SrGvOB2PpxIVM8nWxjPqJGE=," +
                        "sha256/NqvDJlas/GRcYbcWE8S/IceH9cq77kg0jVhZeAPXq8k=," +
                        "sha256/9+ze1cZgR9KO1kZrVDxA4HQ6voHRCSVNz4RdTCx4U8U=," +
                        "sha256/KwccWaCgrnaw6tsrrSO61FgLacNgG2MMLq8GE6+oP5I="))

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        project.ext.set("archivesBaseName", String.format("gnosis-safe-%s", defaultConfig.versionCode))

        ext.betaDistributionReleaseNotes = System.getenv("APP_RELEASE_NOTES")

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    signingConfigs {
        debug {
            // We add the debug keystore to repo so that the travis build will always have the same signature
            storeFile file("../debug.keystore")
        }
        release {
            storeFile file(getKey("SIGNING_STORE_FILE", "../gnosis-multisig-upload.jks"))
            storePassword getKey("SIGNING_STORE_PASSWORD")
            keyAlias "gnosis"
            keyPassword getKey("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xAb8C18E66135561676f0781555D05CF6B22024A3"))
        }

        internal {
            applicationIdSuffix ".internal"
            versionNameSuffix "-internal"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            buildConfigField javaTypes.BOOLEAN, "VERBOSE_EXCEPTIONS", getKey("VERBOSE_EXCEPTIONS", "true")
            buildConfigField javaTypes.BOOLEAN, "ALLOW_RESTRICTED_TX", getKey("ALLOW_RESTRICTED_TX", "true")
            buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xAb8C18E66135561676f0781555D05CF6B22024A3"))
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }

        rinkeby {
            applicationIdSuffix ".rinkeby"
            versionNameSuffix "-rinkeby"
            minifyEnabled true
            signingConfig signingConfigs.release
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }

        release {
            minifyEnabled true
            multiDexEnabled true
            signingConfig signingConfigs.release
            buildConfigField javaTypes.STRING, "BLOCKCHAIN_NAME", asString(getKey("BLOCKCHAIN_NAME", "Mainnet"))
            buildConfigField javaTypes.LONG, "BLOCKCHAIN_CHAIN_ID", getKey("BLOCKCHAIN_CHAIN_ID", "1")
            buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://mainnet.infura.io/v3/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0x07F455F30e862E13E3E3D960762cB11c4F744d52"))
            firebaseAppDistribution {
                releaseNotes = getKey("APP_RELEASE_NOTES")
                groups = getKey("FIREBASE_GROUP")
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }

    packagingOptions {
        exclude 'META-INF/extensions.kotlin_module'
        exclude 'META-INF/LICENSE'
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    viewBinding {
        enabled = true
    }
}

androidExtensions {
    experimental = true
    features = []
}

dependencies {
    // We specify junit before anything else to make sure that this version is prioritized over the
    // one bundled in the android.jar
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":data")
    implementation project(":qrscanner")

    // Gnosis Bivrost
    implementation "com.github.gnosis.bivrost-kotlin:bivrost-solidity-types:$versions.bivrost"

    // Gnosis Svalinn
    implementation "com.github.gnosis.svalinn-kotlin:accounts-base:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:accounts-kethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:android-common:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:blockies:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:crypto:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:eip712:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:eip712-adapter-moshi:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:ethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:ethereum-rpc:$versions.svalinn"
    implementation("com.github.gnosis.svalinn-kotlin:ethereum-rpc-retrofit:$versions.svalinn") {
        exclude group: "com.squareup.retrofit2", module: "converter-moshi"
    }
    implementation "com.github.gnosis.svalinn-kotlin:utils-ethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:mnemonic:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:mnemonic-android:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:models:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:security:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:utils:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:common-adapter-moshi:$versions.svalinn"

    implementation "com.github.gnosis.bivrost-kotlin:bivrost-solidity-types:$versions.bivrost"

    // Appcompat, views
    implementation "androidx.appcompat:appcompat:$versions.androidx_app_compat"
    implementation "androidx.recyclerview:recyclerview:$versions.androidx_recycler_view"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx_constraint_layout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.androidx_swipe_refresh"
    implementation "androidx.multidex:multidex:$versions.multidex"
    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.androidx_lifecycle"
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.androidx_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.androidx_navigation"
    implementation "androidx.fragment:fragment-ktx:$versions.androidx_fragment"
    implementation "androidx.fragment:fragment:$versions.androidx_fragment"
    // Room
    implementation "androidx.room:room-runtime:$versions.androidx_room"
    implementation "androidx.room:room-ktx:$versions.androidx_room"
    // Google Material
    implementation "com.google.android.material:material:$versions.material"
    // Pagination
    implementation "androidx.paging:paging-runtime:$versions.androidx_paging"

    // String formatting
    implementation "com.squareup.phrase:phrase:$versions.phrase"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // Moshi
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    implementation "com.squareup.moshi:moshi-adapters:$versions.moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation("com.squareup.retrofit2:converter-moshi:$versions.retrofit") {
        exclude group: "com.squareup.moshi", module: "moshi"
    }

    // Logging
    implementation "com.jakewharton.timber:timber:$versions.timber"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    implementation "com.squareup.picasso:picasso:$versions.picasso"

    // More
    implementation("org.bouncycastle:bcprov-jdk15on:$versions.bouncycastle", {
        exclude group: 'junit', module: 'junit'
    })

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinx_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinx_coroutines"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.androidx_lifecycle"


    // Firebase
    implementation "com.google.firebase:firebase-analytics:$versions.firebase_analytics"
    implementation "com.google.firebase:firebase-crashlytics:$versions.firebase_crashlytics"
    implementation "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
//    androidTestImplementation "androidx.navigation:navigation-testing:2.3.0-alpha05" //TODO change to stable when available

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.desugar_jdk_libs"

    //debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leak_canary"
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"]
}

task printVersion {
    doLast {
        println android.defaultConfig.versionName
    }
}
